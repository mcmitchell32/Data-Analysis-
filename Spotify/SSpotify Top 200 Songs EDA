{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3bfafbdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install pandas \n",
    "!pip install numpy \n",
    "!pip install seaborn \n",
    "!pip install matplotlib \n",
    "!pip install os \n",
    "!pip install plotly "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a60a9f93",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy as np \n",
    "import seaborn as sns \n",
    "import matplotlib.pyplot as plt \n",
    "%matplotlib inline \n",
    "\n",
    "import os \n",
    "import plotly as px "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83ec4199",
   "metadata": {},
   "outputs": [],
   "source": [
    "cwd = os.getcwd()\n",
    "file = os.listdir(cwd)\n",
    "print(\"File in %r: %s\" %(cwd, file))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6ddbdf68",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Index</th>\n",
       "      <th>Highest Charting Position</th>\n",
       "      <th>Number of Times Charted</th>\n",
       "      <th>Week of Highest Charting</th>\n",
       "      <th>Song Name</th>\n",
       "      <th>Streams</th>\n",
       "      <th>Artist</th>\n",
       "      <th>Artist Followers</th>\n",
       "      <th>Song ID</th>\n",
       "      <th>Genre</th>\n",
       "      <th>...</th>\n",
       "      <th>Danceability</th>\n",
       "      <th>Energy</th>\n",
       "      <th>Loudness</th>\n",
       "      <th>Speechiness</th>\n",
       "      <th>Acousticness</th>\n",
       "      <th>Liveness</th>\n",
       "      <th>Tempo</th>\n",
       "      <th>Duration (ms)</th>\n",
       "      <th>Valence</th>\n",
       "      <th>Chord</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>2021-07-23--2021-07-30</td>\n",
       "      <td>Beggin'</td>\n",
       "      <td>48,633,449</td>\n",
       "      <td>Måneskin</td>\n",
       "      <td>3377762</td>\n",
       "      <td>3Wrjm47oTz2sjIgck11l5e</td>\n",
       "      <td>['indie rock italiano', 'italian pop']</td>\n",
       "      <td>...</td>\n",
       "      <td>0.714</td>\n",
       "      <td>0.8</td>\n",
       "      <td>-4.808</td>\n",
       "      <td>0.0504</td>\n",
       "      <td>0.127</td>\n",
       "      <td>0.359</td>\n",
       "      <td>134.002</td>\n",
       "      <td>211560</td>\n",
       "      <td>0.589</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2021-07-23--2021-07-30</td>\n",
       "      <td>STAY (with Justin Bieber)</td>\n",
       "      <td>47,248,719</td>\n",
       "      <td>The Kid LAROI</td>\n",
       "      <td>2230022</td>\n",
       "      <td>5HCyWlXZPP0y6Gqq8TgA20</td>\n",
       "      <td>['australian hip hop']</td>\n",
       "      <td>...</td>\n",
       "      <td>0.591</td>\n",
       "      <td>0.764</td>\n",
       "      <td>-5.484</td>\n",
       "      <td>0.0483</td>\n",
       "      <td>0.0383</td>\n",
       "      <td>0.103</td>\n",
       "      <td>169.928</td>\n",
       "      <td>141806</td>\n",
       "      <td>0.478</td>\n",
       "      <td>C#/Db</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Index  Highest Charting Position  Number of Times Charted  \\\n",
       "0      1                          1                        8   \n",
       "1      2                          2                        3   \n",
       "\n",
       "  Week of Highest Charting                  Song Name     Streams  \\\n",
       "0   2021-07-23--2021-07-30                    Beggin'  48,633,449   \n",
       "1   2021-07-23--2021-07-30  STAY (with Justin Bieber)  47,248,719   \n",
       "\n",
       "          Artist Artist Followers                 Song ID  \\\n",
       "0       Måneskin          3377762  3Wrjm47oTz2sjIgck11l5e   \n",
       "1  The Kid LAROI          2230022  5HCyWlXZPP0y6Gqq8TgA20   \n",
       "\n",
       "                                    Genre  ... Danceability Energy Loudness  \\\n",
       "0  ['indie rock italiano', 'italian pop']  ...        0.714    0.8   -4.808   \n",
       "1                  ['australian hip hop']  ...        0.591  0.764   -5.484   \n",
       "\n",
       "  Speechiness Acousticness Liveness    Tempo Duration (ms) Valence  Chord  \n",
       "0      0.0504        0.127    0.359  134.002        211560   0.589      B  \n",
       "1      0.0483       0.0383    0.103  169.928        141806   0.478  C#/Db  \n",
       "\n",
       "[2 rows x 23 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv(\"..\\\\Datasets\\\\spotify_dataset.csv\")\n",
    "data.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "15e402fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROWS:1556\n",
      "COLUMNS:23\n",
      "\n",
      "DUPLICATES:0\n",
      "\n",
      "NULL VALUES:\n",
      "Index                        0\n",
      "Highest Charting Position    0\n",
      "Number of Times Charted      0\n",
      "Week of Highest Charting     0\n",
      "Song Name                    0\n",
      "Streams                      0\n",
      "Artist                       0\n",
      "Artist Followers             0\n",
      "Song ID                      0\n",
      "Genre                        0\n",
      "Release Date                 0\n",
      "Weeks Charted                0\n",
      "Popularity                   0\n",
      "Danceability                 0\n",
      "Energy                       0\n",
      "Loudness                     0\n",
      "Speechiness                  0\n",
      "Acousticness                 0\n",
      "Liveness                     0\n",
      "Tempo                        0\n",
      "Duration (ms)                0\n",
      "Valence                      0\n",
      "Chord                        0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(\"ROWS:{}\".format(data.shape[0]))\n",
    "print(\"COLUMNS:{}\".format(data.shape[1]))\n",
    "print(\"\\nDUPLICATES:{}\".format(data.duplicated().sum()))\n",
    "print(\"\\nNULL VALUES:\\n{}\".format(data.isnull().sum()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6fd90962",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.columns = data.columns.str.lower()\n",
    "data.columns = data.columns.str.replace(\" \", \"_\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "eacd6306",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1556 entries, 0 to 1555\n",
      "Data columns (total 23 columns):\n",
      " #   Column                     Non-Null Count  Dtype \n",
      "---  ------                     --------------  ----- \n",
      " 0   index                      1556 non-null   int64 \n",
      " 1   highest_charting_position  1556 non-null   int64 \n",
      " 2   number_of_times_charted    1556 non-null   int64 \n",
      " 3   week_of_highest_charting   1556 non-null   object\n",
      " 4   song_name                  1556 non-null   object\n",
      " 5   streams                    1556 non-null   object\n",
      " 6   artist                     1556 non-null   object\n",
      " 7   artist_followers           1556 non-null   object\n",
      " 8   song_id                    1556 non-null   object\n",
      " 9   genre                      1556 non-null   object\n",
      " 10  release_date               1556 non-null   object\n",
      " 11  weeks_charted              1556 non-null   object\n",
      " 12  popularity                 1556 non-null   object\n",
      " 13  danceability               1556 non-null   object\n",
      " 14  energy                     1556 non-null   object\n",
      " 15  loudness                   1556 non-null   object\n",
      " 16  speechiness                1556 non-null   object\n",
      " 17  acousticness               1556 non-null   object\n",
      " 18  liveness                   1556 non-null   object\n",
      " 19  tempo                      1556 non-null   object\n",
      " 20  duration_(ms)              1556 non-null   object\n",
      " 21  valence                    1556 non-null   object\n",
      " 22  chord                      1556 non-null   object\n",
      "dtypes: int64(3), object(20)\n",
      "memory usage: 279.7+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "96e1c93d",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['week_of_highest_charting_start'] = data['week_of_highest_charting'].apply(lambda x: \\\n",
    "                                                                               x.split(\"--\")[0])\n",
    "data['week_of_highest_charting_end'] = data['week_of_highest_charting'].apply(lambda x: \\\n",
    "                                                                               x.split(\"--\")[1])\n",
    "\n",
    "data['streams'] = data['streams'].apply(lambda x: x.replace(\",\", \"\"))\n",
    "data['artist_followers'] = data['artist_followers'].apply(lambda x: x.replace(\",\", \"\"))\n",
    "data['streams'] = data['streams'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d9a09c69",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['artist_followers'] = data['artist_followers'].apply(lambda x: int(float(x)))\n",
    "#given ValueError raised to convert artist_followers, I'm looking into \"artist follower\" values further\n",
    "#to see why quick conversion isn't working as intended"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c5dafccb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "     11\n",
       "Name: artist_followers, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[~data['artist_followers'].str.isnumeric()]['artist_followers'].value_counts()\n",
    "#there are 11 entries that contain no artist followers, so that's why the above function wasn't working \n",
    "#if there is one issue, there are probably a few more, so I'm going to look into that"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "620d8ce0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>song_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5uEYRdEIh9Bo4fpjDd4Na9</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4S2uhQE8L9V6p7rj7SiauJ</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35UUpTmrcFXNIVIN26ujXl</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2YpeDb67231RjR0MgVLzsG</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4lUmnwRybYH7mMzf16xB0y</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0oQc0F6KUE7QY7k5TU6bic</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7wsmIIm0xWmtP7TmACXkJn</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1iQDltZqI7BXnHrFy4Qo1k</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1D3z6HTiQsNmZxjl7F7eoG</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2MbdDtCv5LUVjYy9RuGTgC</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0GzuHFG4Ql6DoyxFRnIk3F</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1SV1fxF65n9NhRHp3KlBuu</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>37BZB0z9T8Xu7U3e65qxFy</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>4umIPjkehX1r7uhmGvXiSV</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>3yZCjDTxzZxx1kll1sRjGc</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0t3ZvGKlmYmVsDzBJAXK8C</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>7ygpwy2qP3NbrxVkHvUhXY</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1WedZeiezCmCEOzLwhx0hV</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>463CkQjx2Zk1yXoBuierM9</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>02kDW379Yfd5PzW5A6vuGt</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>73O30uMI7n6DuzBmbtO7kC</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0e6NlGJxYlHvAN8SKxad7N</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>5VwwpU7KsLhgfbMEecedhJ</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>6uvMKqNlrSvcC4NaKnrwjZ</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>4ZRrLHqzhGRXYj2qcB4s5S</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>27RSJHEA99Y0Vsow7nA37A</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2AlYncTpVHKwHb55F9lF6O</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>07Oz5StQ7GRoygNLaXs2pd</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     index  song_id\n",
       "0   5uEYRdEIh9Bo4fpjDd4Na9        3\n",
       "1   4S2uhQE8L9V6p7rj7SiauJ        2\n",
       "2   35UUpTmrcFXNIVIN26ujXl        2\n",
       "3   2YpeDb67231RjR0MgVLzsG        2\n",
       "4   4lUmnwRybYH7mMzf16xB0y        2\n",
       "5   0oQc0F6KUE7QY7k5TU6bic        2\n",
       "6   7wsmIIm0xWmtP7TmACXkJn        2\n",
       "7   1iQDltZqI7BXnHrFy4Qo1k        2\n",
       "8   1D3z6HTiQsNmZxjl7F7eoG        2\n",
       "9   2MbdDtCv5LUVjYy9RuGTgC        2\n",
       "10  0GzuHFG4Ql6DoyxFRnIk3F        2\n",
       "11  1SV1fxF65n9NhRHp3KlBuu        2\n",
       "12  37BZB0z9T8Xu7U3e65qxFy        2\n",
       "13  4umIPjkehX1r7uhmGvXiSV        2\n",
       "14  3yZCjDTxzZxx1kll1sRjGc        2\n",
       "15  0t3ZvGKlmYmVsDzBJAXK8C        2\n",
       "16  7ygpwy2qP3NbrxVkHvUhXY        2\n",
       "17  1WedZeiezCmCEOzLwhx0hV        2\n",
       "18  463CkQjx2Zk1yXoBuierM9        2\n",
       "19  02kDW379Yfd5PzW5A6vuGt        2\n",
       "20  73O30uMI7n6DuzBmbtO7kC        2\n",
       "21  0e6NlGJxYlHvAN8SKxad7N        2\n",
       "22  5VwwpU7KsLhgfbMEecedhJ        2\n",
       "23  6uvMKqNlrSvcC4NaKnrwjZ        2\n",
       "24  4ZRrLHqzhGRXYj2qcB4s5S        2\n",
       "25  27RSJHEA99Y0Vsow7nA37A        2\n",
       "26  2AlYncTpVHKwHb55F9lF6O        2\n",
       "27  07Oz5StQ7GRoygNLaXs2pd        2"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dup_IDs = data['song_id'].value_counts().head(50)\n",
    "dup_IDs = dup_IDs[1:29]\n",
    "dup_IDs = pd.DataFrame(dup_IDs)\n",
    "dup_IDs.reset_index(drop=False, inplace=True)\n",
    "#there are also several song IDs that were counted multiple times; this may have to do with how artists were\n",
    "#input into the system (ordering)\n",
    "dup_IDs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8ee72d9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>highest_charting_position</th>\n",
       "      <th>number_of_times_charted</th>\n",
       "      <th>week_of_highest_charting</th>\n",
       "      <th>song_name</th>\n",
       "      <th>streams</th>\n",
       "      <th>artist</th>\n",
       "      <th>artist_followers</th>\n",
       "      <th>song_id</th>\n",
       "      <th>genre</th>\n",
       "      <th>...</th>\n",
       "      <th>loudness</th>\n",
       "      <th>speechiness</th>\n",
       "      <th>acousticness</th>\n",
       "      <th>liveness</th>\n",
       "      <th>tempo</th>\n",
       "      <th>duration_(ms)</th>\n",
       "      <th>valence</th>\n",
       "      <th>chord</th>\n",
       "      <th>week_of_highest_charting_start</th>\n",
       "      <th>week_of_highest_charting_end</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>85</td>\n",
       "      <td>32</td>\n",
       "      <td>28</td>\n",
       "      <td>2021-04-30--2021-05-07</td>\n",
       "      <td>Goosebumps - Remix</td>\n",
       "      <td>7452633</td>\n",
       "      <td>Travis Scott, HVME</td>\n",
       "      <td>17719446</td>\n",
       "      <td>5uEYRdEIh9Bo4fpjDd4Na9</td>\n",
       "      <td>['rap', 'slap house']</td>\n",
       "      <td>...</td>\n",
       "      <td>-7.846</td>\n",
       "      <td>0.0379</td>\n",
       "      <td>0.418</td>\n",
       "      <td>0.124</td>\n",
       "      <td>124.917</td>\n",
       "      <td>162803</td>\n",
       "      <td>0.808</td>\n",
       "      <td>C#/Db</td>\n",
       "      <td>2021-04-30</td>\n",
       "      <td>2021-05-07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>145</td>\n",
       "      <td>13</td>\n",
       "      <td>83</td>\n",
       "      <td>2020-04-24--2020-05-01</td>\n",
       "      <td>goosebumps</td>\n",
       "      <td>5691540</td>\n",
       "      <td>Travis Scott</td>\n",
       "      <td>17719446</td>\n",
       "      <td>5uEYRdEIh9Bo4fpjDd4Na9</td>\n",
       "      <td>['rap', 'slap house']</td>\n",
       "      <td>...</td>\n",
       "      <td>-7.846</td>\n",
       "      <td>0.0379</td>\n",
       "      <td>0.418</td>\n",
       "      <td>0.124</td>\n",
       "      <td>124.917</td>\n",
       "      <td>162803</td>\n",
       "      <td>0.808</td>\n",
       "      <td>C#/Db</td>\n",
       "      <td>2020-04-24</td>\n",
       "      <td>2020-05-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>407</th>\n",
       "      <td>408</td>\n",
       "      <td>33</td>\n",
       "      <td>24</td>\n",
       "      <td>2021-01-08--2021-01-15</td>\n",
       "      <td>Goosebumps</td>\n",
       "      <td>5496962</td>\n",
       "      <td>HVME</td>\n",
       "      <td>17719446</td>\n",
       "      <td>5uEYRdEIh9Bo4fpjDd4Na9</td>\n",
       "      <td>['rap', 'slap house']</td>\n",
       "      <td>...</td>\n",
       "      <td>-7.846</td>\n",
       "      <td>0.0379</td>\n",
       "      <td>0.418</td>\n",
       "      <td>0.124</td>\n",
       "      <td>124.917</td>\n",
       "      <td>162803</td>\n",
       "      <td>0.808</td>\n",
       "      <td>C#/Db</td>\n",
       "      <td>2021-01-08</td>\n",
       "      <td>2021-01-15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     index  highest_charting_position  number_of_times_charted  \\\n",
       "84      85                         32                       28   \n",
       "144    145                         13                       83   \n",
       "407    408                         33                       24   \n",
       "\n",
       "    week_of_highest_charting           song_name  streams              artist  \\\n",
       "84    2021-04-30--2021-05-07  Goosebumps - Remix  7452633  Travis Scott, HVME   \n",
       "144   2020-04-24--2020-05-01          goosebumps  5691540        Travis Scott   \n",
       "407   2021-01-08--2021-01-15          Goosebumps  5496962                HVME   \n",
       "\n",
       "    artist_followers                 song_id                  genre  ...  \\\n",
       "84          17719446  5uEYRdEIh9Bo4fpjDd4Na9  ['rap', 'slap house']  ...   \n",
       "144         17719446  5uEYRdEIh9Bo4fpjDd4Na9  ['rap', 'slap house']  ...   \n",
       "407         17719446  5uEYRdEIh9Bo4fpjDd4Na9  ['rap', 'slap house']  ...   \n",
       "\n",
       "    loudness speechiness acousticness liveness    tempo duration_(ms) valence  \\\n",
       "84    -7.846      0.0379        0.418    0.124  124.917        162803   0.808   \n",
       "144   -7.846      0.0379        0.418    0.124  124.917        162803   0.808   \n",
       "407   -7.846      0.0379        0.418    0.124  124.917        162803   0.808   \n",
       "\n",
       "     chord week_of_highest_charting_start week_of_highest_charting_end  \n",
       "84   C#/Db                     2021-04-30                   2021-05-07  \n",
       "144  C#/Db                     2020-04-24                   2020-05-01  \n",
       "407  C#/Db                     2021-01-08                   2021-01-15  \n",
       "\n",
       "[3 rows x 25 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#going to take the ID that's duplicated 3 times to see what's actually going on here\n",
    "data[data['song_id']=='5uEYRdEIh9Bo4fpjDd4Na9']\n",
    "#song names have same ID because they are either remixes or have variations within artist series "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "acd217e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(57, 25)\n"
     ]
    }
   ],
   "source": [
    "duplicated_df = pd.DataFrame() \n",
    "for i in dup_IDs['index']: \n",
    "    j = pd.DataFrame(data[data['song_id'] == i])\n",
    "    duplicated_df = duplicated_df.append(j)\n",
    "print(duplicated_df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "58330500",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1516 entries, 0 to 1555\n",
      "Data columns (total 25 columns):\n",
      " #   Column                          Non-Null Count  Dtype \n",
      "---  ------                          --------------  ----- \n",
      " 0   index                           1516 non-null   int64 \n",
      " 1   highest_charting_position       1516 non-null   int64 \n",
      " 2   number_of_times_charted         1516 non-null   int64 \n",
      " 3   week_of_highest_charting        1516 non-null   object\n",
      " 4   song_name                       1516 non-null   object\n",
      " 5   streams                         1516 non-null   int32 \n",
      " 6   artist                          1516 non-null   object\n",
      " 7   artist_followers                1516 non-null   object\n",
      " 8   song_id                         1516 non-null   object\n",
      " 9   genre                           1516 non-null   object\n",
      " 10  release_date                    1516 non-null   object\n",
      " 11  weeks_charted                   1516 non-null   object\n",
      " 12  popularity                      1516 non-null   object\n",
      " 13  danceability                    1516 non-null   object\n",
      " 14  energy                          1516 non-null   object\n",
      " 15  loudness                        1516 non-null   object\n",
      " 16  speechiness                     1516 non-null   object\n",
      " 17  acousticness                    1516 non-null   object\n",
      " 18  liveness                        1516 non-null   object\n",
      " 19  tempo                           1516 non-null   object\n",
      " 20  duration_(ms)                   1516 non-null   object\n",
      " 21  valence                         1516 non-null   object\n",
      " 22  chord                           1516 non-null   object\n",
      " 23  week_of_highest_charting_start  1516 non-null   object\n",
      " 24  week_of_highest_charting_end    1516 non-null   object\n",
      "dtypes: int32(1), int64(3), object(21)\n",
      "memory usage: 302.0+ KB\n"
     ]
    }
   ],
   "source": [
    "data = data.loc[data['song_id'] != ' ']\n",
    "data.drop_duplicates('song_id', inplace=True)\n",
    "data['song_id'].value_counts() # confirming that all duplicate song IDs have been removed \n",
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f3fbdeac",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.iloc[:, 13:22] = data.iloc[:, 13:22].astype('float')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "09fb2520",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['release_date'] = pd.to_datetime(data['release_date'], errors='coerce')\n",
    "data['release_year'] = data['release_date'].dt.year \n",
    "data['release_year_month'] = data['release_date'].dt.to_period('M')\n",
    "data['release_month'] = data['release_date'].dt.month \n",
    "data['release_month_year'] = data['release_date'].dt.month_name() \n",
    "data['release_DOW'] = data['release_date'].dt.weekday"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "322bc131",
   "metadata": {},
   "outputs": [],
   "source": [
    "day_of_week = {\n",
    "    0: 'Monday', \n",
    "    1:'Tuesday', \n",
    "    2:'Wednesday', \n",
    "    3:'Thursday', \n",
    "    4:'Friday', \n",
    "    5:'Saturday', \n",
    "    6:'Sunday'\n",
    "}\n",
    "\n",
    "data['release_DOW'] = data['release_DOW'].replace(to_replace=day_of_week)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fd29823",
   "metadata": {},
   "source": [
    "Data Visualization \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "61d3619c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "releases_DOW = data['release_DOW'].value_counts().reset_index().rename(columns={'index':'DOW','release_DOW':'count'})\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(15, 7))\n",
    "\n",
    "sns.barplot(data=releases_DOW, x='DOW', y='count', order=day_of_week.values(), color='#1DB954')\n",
    "\n",
    "plt.xlabel('Day of Week', fontsize=12)\n",
    "plt.ylabel('Number of Song Releases', fontsize=12)\n",
    "ax.text(-0.35, 1200, \"Spotify's 'New Music Friday'\", \n",
    "        {'font':'Arial', 'fontsize': 18, 'fontweight':'heavy'})\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d28b2b10",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "songs_ot = data.groupby('week_of_highest_charting_start')['streams'].sum().reset_index().sort_values('week_of_highest_charting_start', ascending=True)\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(15, 7))\n",
    "\n",
    "ax.bar(data=songs_ot, x='week_of_highest_charting_start', height='streams', width=0.5, color='#1DB954')\n",
    "\n",
    "plt.xticks(rotation=90)\n",
    "plt.xlabel('Week', fontsize=12)\n",
    "plt.ylabel('Total Streams ( 100 Millions)', fontsize=12)\n",
    "ax.spines[['right', 'top']].set_visible(False)\n",
    "ax.text(1, 660000000, \"Total Streams Over Time\", \n",
    "       {'font':'Arial', 'fontsize':18, 'fontweight':'heavy'})\n",
    "\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
